//begin command - marks end of variable declarations

		if(strcmp(command,"begin") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);
			phase = 1;
			fprintf(outFile,"INCLUDE \"acornconstants.asm\"\n");
			fprintf(outFile,"ORG &2000\n");
			fprintf(outFile,".start\n");
		}

//end command - marks end of program
		if(strcmp(command,"end") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);
			fprintf(outFile,"rts\n\n");
			fprintf(outFile,"INCLUDE \"%s\"\n\n",SUBFILENAME);

			//copy variables table to output file
			for(i=0;i<numbersIndex;i++)
			{
				fprintf(outFile,".%s ",numbers[i].name);
				
				if(numbers[i].type == 0) 
				{
					fprintf(outFile,"equb ");
				}
				else
				{
					fprintf(outFile,"equw ");
				}
				
				fprintf(outFile,"%d\n",numbers[i].value);
			}
			fprintf(outFile,"\n");
			
			
			//copy strings table to output file
			
			for(i=0;i<stringsIndex;i++)
			{
				fprintf(outFile,".%s ",strings[i].name);
				fprintf(outFile,"equs ");
				fprintf(outFile,"%s\n",strings[i].value);
				fprintf(outFile,"equb 0\n");
				
			}
			fprintf(outFile,"\n");
			
			fprintf(outFile,".end\n");
			fprintf(outFile,"SAVE \"MAIN\",start,end\n");
			
		}

//rem command - remark - comments added to output file as comment
		if(strcmp(command,"rem") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);
			line[0] = '\\';
			line[1] = '\\';
			line[2] = ' ';
			fprintf(outFile,"%s",line);
			
		}
		





/*********************************************************************
*                                                                    *
*	to add a command use the following template:                 *
*
	if(strcmp(command,"<command>")==0)
	{
		printf("\ncommand = %s",command);

		strcpy(argument,getTerm(line,i));
		i = i+strlen(argument)+1;

		printf("\nargument = %s",argument);
	}
*                                                                    *
*********************************************************************/	  
	  

//let command - assinging of values to variables - includes arithmetic		
		
		if(strcmp(command,"let") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);

			strcpy(argument,getTerm(line,i));
			i = i+strlen(argument)+1;

			printf("\nargument = %s",argument);
		}


//print command - print string/variable to screen		

		if(strcmp(command,"print") == 0)
		{
			char buf[10];
			
			found = 1;
			printf("\ncommand = %s",command);
			
			for(i=6;i<(strlen(line)-2);i++)
			{
				argument[i-6]=line[i];
			}
			argument[i-7] = '\0';
			printf("\nargument = %s",argument);
			
			fprintf(outFile,"\\\\ print\n");
			// look at ../code/6502/print/main.asm

//there are 5 (maybe more?) possibilities here:
		
		// ( 1 ) string literal  : "blah blah blah";
		if(argument[0]=='"')
		{
			//add string literal to strings table and name it string<stringsIndex>
							
				sprintf(buf,"string%d",stringsIndex);			
				strcpy(strings[stringsIndex].name,buf);
				strcpy(strings[stringsIndex].value,argument);
				stringsIndex++;
				
			//set printvector to string<x> and call printstring subroutine
				fprintf(outFile,"lda #LO(%s)\n",buf);
				fprintf(outFile,"sta printvector\n");
				fprintf(outFile,"lda #HI(%s)\n",buf);
				fprintf(outFile,"sta printvector+1\n");
				fprintf(outFile,"ldy #0\n");
				fprintf(outFile,"jsr printstring\n");
				
			//add printstring soubroutine if it has not been added to sub file	
				int tempcounter = 0;
				while(!strcmp(subroutines[tempcounter],""))
				{
					if(strcmp(subroutines[tempcounter],"printstring")==0)
					{
						subfound=1;
					}
					tempcounter++;
				}
				if(subfound == 0)
				{
					fprintf(subFile,"\n\n.printstring\n");
					fprintf(subFile,"lda (printvector),y\n");
					fprintf(subFile,"beq printend\n");
					fprintf(subFile,"jsr osasci\n");
					fprintf(subFile,"iny\n");
					fprintf(subFile,"bne printstring\n");
					fprintf(subFile,".printend\n");
					fprintf(subFile,"rts\n");
				}
				subfound=0;
		}
		// ( 2 ) string variable :
			//set printvector to string varaible name and call printstring routine
		// ( 3 ) byte variable   : <byte> or <byte> <+-/*> <byte> etc
		// ( 4 ) word variable   : <word> or <word> <+-/*> <word> etc
		// ( 5 ) nothing         : ;


			}
		

//mode command - set screenmode

		if(strcmp(command,"mode") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);

			strcpy(argument,getTerm(line,i));
			i = i+strlen(argument)+1;
			printf("\nargument = %s",argument);

			
			fprintf(outFile,"lda #$16\n");
			fprintf(outFile,"jsr oswrch\n");
			fprintf(outFile,"lda #%s\n",argument);
			fprintf(outFile,"jsr oswrch\n");
			
		}
		
//goto command - jump to a label
		
		if(strcmp(command,"goto") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);
			
			strcpy(argument,getTerm(line,i));
			i = i+strlen(argument)+1;
			printf("\nargument = %s",argument);
			
			fprintf(outFile,"jmp %s\n",argument);
		}
		

//label command - for use with goto

		if(strcmp(command,"label") == 0)
		{
			found = 1;
			printf("\ncommand = %s",command);

			strcpy(argument,getTerm(line,i));
			i = i+strlen(argument)+1;
			printf("\nargument = %s",argument);
			
			fprintf(outFile,".%s\n",argument);
		}
		
		
